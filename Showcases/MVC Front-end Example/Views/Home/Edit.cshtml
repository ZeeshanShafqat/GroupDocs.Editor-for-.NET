@model TinyMce.MvcSample.Models.EditModel

@{
    ViewBag.Title = "Edit existent or new document";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    p > #taWrapper, p > #outputWrapper {
        margin: 10pt;
    }
</style>

<script src="~/scripts/tinymce/tinymce.min.js"></script>
<script src="~/scripts/jquery-1.12.4-dev.js"></script>

<script>
        tinymce.init({
            selector: 'textarea#taContent',
            theme: 'modern',
            height: 500,
            plugins: [
                'advlist autolink link image imagetools lists charmap print preview hr anchor pagebreak spellchecker',
                'searchreplace wordcount visualblocks visualchars code fullscreen insertdatetime media nonbreaking',
                'save table contextmenu directionality emoticons template paste textcolor'
            ],
            content_css: '@Model.CssRelativePath',
            toolbar: 'newdocument, bold, italic, underline, strikethrough, alignleft, aligncenter, alignright, alignjustify, styleselect, formatselect, fontselect, fontsizeselect, cut, copy, paste, bullist, numlist, outdent, indent, blockquote, undo, redo, removeformat, subscript, superscript, link, image',

            images_upload_handler: function (blobInfo, success, failure) {
                var xhr, formData;

                xhr = new XMLHttpRequest();
                xhr.withCredentials = false;
                xhr.open('POST', '/Home/UploadCustom');

                xhr.onload = function () {
                    var json;

                    if (xhr.status != 200) {
                        failure('HTTP Error: ' + xhr.status);
                        return;
                    }

                    json = JSON.parse(xhr.responseText);

                    if (!json || typeof json.location != 'string') {
                        failure('Invalid JSON: ' + xhr.responseText);
                        return;
                    }

                    success(json.location);
                };

                formData = new FormData();
                formData.append('file', blobInfo.blob(), blobInfo.filename());
                var documentName = document.getElementById('tbDocumentName').value;
                formData.append('documentName', documentName);
                xhr.send(formData);
            },

            // enable title field in the Image dialog
            image_title: true,
            // enable automatic uploads of images represented by blob or data URIs
            automatic_uploads: true,
            // URL of our upload handler (for more details check: https://www.tinymce.com/docs/configure/file-image-upload/#images_upload_url)
            //images_upload_url: '/Home/UploadImage',
            // here we add custom filepicker only to Image dialog
            file_picker_types: 'image',
            // and here's our custom image picker
            file_picker_callback: function (cb, value, meta) {
                var input = document.createElement('input');
                input.setAttribute('type', 'file');
                input.setAttribute('accept', 'image/*');

                // Note: In modern browsers input[type="file"] is functional without
                // even adding it to the DOM, but that might not be the case in some older
                // or quirky browsers like IE, so you might want to add it to the DOM
                // just in case, and visually hide it. And do not forget do remove it
                // once you do not need it anymore.

                input.onchange = function () {
                    var file = this.files[0];

                    // Note: Now we need to register the blob in TinyMCEs image blob
                    // registry. In the next release this part hopefully won't be
                    // necessary, as we are looking to handle it internally.

                    var id = 'blobid' + (new Date()).getTime();  // TODO: Uncoment for unique names

                    //var id = file.FileName;

                    var blobCache = tinymce.activeEditor.editorUpload.blobCache;
                    var blobInfo = blobCache.create(id, file);
                    blobCache.add(blobInfo);

                    // call the callback and populate the Title field with the file name
                    cb(blobInfo.blobUri(), { title: file.name });
                };

                input.click();
            },
            remove_trailing_brs: false//important !!!
        });
</script>

<p>
    <label for="tbDocumentName">Editing document:</label>
    <input type="text" id="tbDocumentName" value="@Model.EditableDocumentName" readonly="readonly"/>
</p>

<p id="taWrapper">
    <textarea id="taContent">
        @Model.HtmlContent
    </textarea>
</p>
<input type="hidden" id="isNewArticle" value="@(Model.IsNewDocument ? "1" : "0" )"/>

<p id="outputWrapper">
    <p>
        <label for="tbPassword">Specify password, if you want to encode the resultant document</label><input type="text" id="tbPassword"/>
    </p>
    <p>
        <label for="locales">Specify default locale for the document</label>
        @Html.DropDownList("locales", new SelectList(Model.Locales, "Value", "Text"))
    </p>
    <p>
        <label for="localesRtl">Specify default RTL locale for the document</label>
        @Html.DropDownList("localesRtl", new SelectList(Model.Locales, "Value", "Text"))
    </p>
    <p>
        <label for="localesEa">Specify default East-Asian locale for the document</label>
        @Html.DropDownList("localesEa", new SelectList(Model.Locales, "Value", "Text"))
    </p>
    <button id="btnSubmit">Save/Generate</button>
    <br/>
    <div id="output">
        <p id="successStatus"></p>
        <p id="outputPdf"></p>
        <p id="outputWord"></p>
    </div>
</p>


<script type="text/javascript">
    function GetContent() {
        window.tinymce.triggerSave();
        var ed = window.tinymce.get('taContent');
        var content = ed.getContent();
        return content;
    }

    $(document).ready(function () {
        $("#btnSubmit").click(function () {
            var htmlContent = GetContent();
            var documentName = document.getElementById('tbDocumentName').value;
            var password = document.getElementById('tbPassword').value;
            var locale = document.getElementById('locales').value;
            var localeRtl = document.getElementById('localesRtl').value;
            var localeEa = document.getElementById('localesEa').value;
            var isNewArticle = document.getElementById('isNewArticle').value;
            var content = {
                documentName: documentName, password: password, content: htmlContent, isNewArticle: isNewArticle,
                locale: locale, localeRtl: localeRtl, localeEa: localeEa
            };

            $.ajax({
                url: 'Process',
                async: true,
                type: "POST",
                data: content,
                dataType: 'json',
                beforeSend: function (jqXHR, settings) {
                    document.getElementById("btnSubmit").disabled = true;
                    var successStatus = document.getElementById('successStatus');
                    successStatus.innerText = 'Sending a request...';
                },
                success: function (data, textStatus, jqXHR) {
                    document.getElementById("btnSubmit").disabled = false;
                    var successStatus = document.getElementById('successStatus');
                    successStatus.innerText = textStatus;
                    var outputWord = document.getElementById('outputWord');
                    
                    var wordPath = data.wordDownloadLink;
                    outputWord.innerHTML = '<a target="_blank" href="' + wordPath + '">Download resultant document</a>';
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    document.getElementById("btnSubmit").disabled = false;
                    var successStatus = document.getElementById('successStatus');
                    successStatus.innerText = 'Error: ' + textStatus + '; ' + errorThrown + '.';
                }
            });
        });
    });
</script>
